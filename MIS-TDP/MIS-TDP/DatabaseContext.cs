#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.261
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MIS_TDP
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
using System.IO;
using System.IO.IsolatedStorage;
using Microsoft.Phone.Data.Linq.Mapping;
using Microsoft.Phone.Data.Linq;


public class DebugWriter : TextWriter
{
    private const int DefaultBufferSize = 256;
    private System.Text.StringBuilder _buffer;

    public DebugWriter()
    {
        BufferSize = 256;
        _buffer = new System.Text.StringBuilder(BufferSize);
    }

    public int BufferSize
    {
        get;
        private set;
    }

    public override System.Text.Encoding Encoding
    {
        get { return System.Text.Encoding.UTF8; }
    }

    #region StreamWriter Overrides
    public override void Write(char value)
    {
        _buffer.Append(value);
        if (_buffer.Length >= BufferSize)
            Flush();
    }

    public override void WriteLine(string value)
    {
        Flush();

        using(var reader = new StringReader(value))
        {
            string line; 
            while( null != (line = reader.ReadLine()))
                System.Diagnostics.Debug.WriteLine(line);
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
            Flush();
    }

    public override void Flush()
    {
        if (_buffer.Length > 0)
        {
            System.Diagnostics.Debug.WriteLine(_buffer);
            _buffer.Clear();
        }
    }
    #endregion
}


	public partial class DatabaseContext : System.Data.Linq.DataContext
	{
		
		public bool CreateIfNotExists()
		{
			bool created = false;
			if (!this.DatabaseExists())
			{
				string[] names = this.GetType().Assembly.GetManifestResourceNames();
				string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
				if (name != null)
				{
					using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
					{
						if (resourceStream != null)
						{
							using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
							{
								using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, FileMode.Create, myIsolatedStorage))
								{
									using (BinaryWriter writer = new BinaryWriter(fileStream))
									{
										long length = resourceStream.Length;
										byte[] buffer = new byte[32];
										int readCount = 0;
										using (BinaryReader reader = new BinaryReader(resourceStream))
										{
											// read file in chunks in order to reduce memory consumption and increase performance
											while (readCount < length)
											{
												int actual = reader.Read(buffer, 0, buffer.Length);
												readCount += actual;
												writer.Write(buffer, 0, actual);
											}
										}
									}
								}
							}
							created = true;
						}
						else
						{
							this.CreateDatabase();
							created = true;
						}
					}
				}
				else
				{
					this.CreateDatabase();
					created = true;
				}
			}
			return created;
		}
		
		public bool LogDebug
		{
			set
			{
				if (value)
				{
					this.Log = new DebugWriter();
				}
			}
		}
		
		public static string ConnectionString = "Data Source=isostore:/Database.sdf";

		public static string ConnectionStringReadOnly = "Data Source=appdata:/Database.sdf;File Mode=Read Only;";

		public static string FileName = "Database.sdf";

		public DatabaseContext(string connectionString) : base(connectionString)
		{
			OnCreated();
		}
		
    #region Definitionen der Extensibility-Methode
    partial void OnCreated();
    partial void InsertTblAttachment(TblAttachment instance);
    partial void UpdateTblAttachment(TblAttachment instance);
    partial void DeleteTblAttachment(TblAttachment instance);
    partial void InsertTblAuftrag(TblAuftrag instance);
    partial void UpdateTblAuftrag(TblAuftrag instance);
    partial void DeleteTblAuftrag(TblAuftrag instance);
    partial void InsertTblFabrikat(TblFabrikat instance);
    partial void UpdateTblFabrikat(TblFabrikat instance);
    partial void DeleteTblFabrikat(TblFabrikat instance);
    partial void InsertTblVersicherung(TblVersicherung instance);
    partial void UpdateTblVersicherung(TblVersicherung instance);
    partial void DeleteTblVersicherung(TblVersicherung instance);
    #endregion
		
		public System.Data.Linq.Table<TblAttachment> TblAttachment
		{
			get
			{
				return this.GetTable<TblAttachment>();
			}
		}
		
		public System.Data.Linq.Table<TblAuftrag> TblAuftrag
		{
			get
			{
				return this.GetTable<TblAuftrag>();
			}
		}
		
		public System.Data.Linq.Table<TblFabrikat> TblFabrikat
		{
			get
			{
				return this.GetTable<TblFabrikat>();
			}
		}
		
		public System.Data.Linq.Table<TblVersicherung> TblVersicherung
		{
			get
			{
				return this.GetTable<TblVersicherung>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tblAttachment")]
	public partial class TblAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentNr;
		
		private System.Nullable<int> _Typ;
		
		private string _Data;
		
		private System.Nullable<int> _AuftragNr;
		
		private EntityRef<TblAuftrag> _TblAuftrag;
		
    #region Definitionen der Extensibility-Methode
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentNrChanging(int value);
    partial void OnAttachmentNrChanged();
    partial void OnTypChanging(System.Nullable<int> value);
    partial void OnTypChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnAuftragNrChanging(System.Nullable<int> value);
    partial void OnAuftragNrChanged();
    #endregion
		
		public TblAttachment()
		{
			this._TblAuftrag = default(EntityRef<TblAuftrag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="attachmentNr", Storage="_AttachmentNr", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttachmentNr
		{
			get
			{
				return this._AttachmentNr;
			}
			set
			{
				if ((this._AttachmentNr != value))
				{
					this.OnAttachmentNrChanging(value);
					this.SendPropertyChanging();
					this._AttachmentNr = value;
					this.SendPropertyChanged("AttachmentNr");
					this.OnAttachmentNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="typ", Storage="_Typ", DbType="Int")]
		public System.Nullable<int> Typ
		{
			get
			{
				return this._Typ;
			}
			set
			{
				if ((this._Typ != value))
				{
					this.OnTypChanging(value);
					this.SendPropertyChanging();
					this._Typ = value;
					this.SendPropertyChanged("Typ");
					this.OnTypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="data", Storage="_Data", DbType="NVarChar(100)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="auftragNr", Storage="_AuftragNr", DbType="Int")]
		public System.Nullable<int> AuftragNr
		{
			get
			{
				return this._AuftragNr;
			}
			set
			{
				if ((this._AuftragNr != value))
				{
					this.OnAuftragNrChanging(value);
					this.SendPropertyChanging();
					this._AuftragNr = value;
					this.SendPropertyChanged("AuftragNr");
					this.OnAuftragNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AuftragNr", Storage="_TblAuftrag", ThisKey="AuftragNr", OtherKey="AuftragNr", IsForeignKey=true)]
		public TblAuftrag TblAuftrag
		{
			get
			{
				return this._TblAuftrag.Entity;
			}
			set
			{
				TblAuftrag previousValue = this._TblAuftrag.Entity;
				if (((previousValue != value) 
							|| (this._TblAuftrag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblAuftrag.Entity = null;
						previousValue.TblAttachment.Remove(this);
					}
					this._TblAuftrag.Entity = value;
					if ((value != null))
					{
						value.TblAttachment.Add(this);
						this._AuftragNr = value.AuftragNr;
					}
					else
					{
						this._AuftragNr = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblAuftrag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tblAuftrag")]
	public partial class TblAuftrag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuftragNr;
		
		private System.Nullable<int> _GeschaetzterSchaden;
		
		private string _VersicherterName;
		
		private string _VersicherterVorname;
		
		private string _KfzKennzeichen;
		
		private string _KfzFabrikat;
		
		private System.Nullable<int> _VersicherungNr;
		
		private System.Nullable<System.DateTime> _Datum;
		
		private EntitySet<TblAttachment> _TblAttachment;
		
		private EntityRef<TblVersicherung> _TblVersicherung;
		
    #region Definitionen der Extensibility-Methode
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuftragNrChanging(int value);
    partial void OnAuftragNrChanged();
    partial void OnGeschaetzterSchadenChanging(System.Nullable<int> value);
    partial void OnGeschaetzterSchadenChanged();
    partial void OnVersicherterNameChanging(string value);
    partial void OnVersicherterNameChanged();
    partial void OnVersicherterVornameChanging(string value);
    partial void OnVersicherterVornameChanged();
    partial void OnKfzKennzeichenChanging(string value);
    partial void OnKfzKennzeichenChanged();
    partial void OnKfzFabrikatChanging(string value);
    partial void OnKfzFabrikatChanged();
    partial void OnVersicherungNrChanging(System.Nullable<int> value);
    partial void OnVersicherungNrChanged();
    partial void OnDatumChanging(System.Nullable<System.DateTime> value);
    partial void OnDatumChanged();
    #endregion
		
		public TblAuftrag()
		{
			this._TblAttachment = new EntitySet<TblAttachment>(new Action<TblAttachment>(this.attach_TblAttachment), new Action<TblAttachment>(this.detach_TblAttachment));
			this._TblVersicherung = default(EntityRef<TblVersicherung>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="auftragNr", Storage="_AuftragNr", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuftragNr
		{
			get
			{
				return this._AuftragNr;
			}
			set
			{
				if ((this._AuftragNr != value))
				{
					this.OnAuftragNrChanging(value);
					this.SendPropertyChanging();
					this._AuftragNr = value;
					this.SendPropertyChanged("AuftragNr");
					this.OnAuftragNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="geschaetzterSchaden", Storage="_GeschaetzterSchaden", DbType="Int")]
		public System.Nullable<int> GeschaetzterSchaden
		{
			get
			{
				return this._GeschaetzterSchaden;
			}
			set
			{
				if ((this._GeschaetzterSchaden != value))
				{
					this.OnGeschaetzterSchadenChanging(value);
					this.SendPropertyChanging();
					this._GeschaetzterSchaden = value;
					this.SendPropertyChanged("GeschaetzterSchaden");
					this.OnGeschaetzterSchadenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="versicherterName", Storage="_VersicherterName", DbType="NVarChar(100)")]
		public string VersicherterName
		{
			get
			{
				return this._VersicherterName;
			}
			set
			{
				if ((this._VersicherterName != value))
				{
					this.OnVersicherterNameChanging(value);
					this.SendPropertyChanging();
					this._VersicherterName = value;
					this.SendPropertyChanged("VersicherterName");
					this.OnVersicherterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="versicherterVorname", Storage="_VersicherterVorname", DbType="NVarChar(100)")]
		public string VersicherterVorname
		{
			get
			{
				return this._VersicherterVorname;
			}
			set
			{
				if ((this._VersicherterVorname != value))
				{
					this.OnVersicherterVornameChanging(value);
					this.SendPropertyChanging();
					this._VersicherterVorname = value;
					this.SendPropertyChanged("VersicherterVorname");
					this.OnVersicherterVornameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="kfzKennzeichen", Storage="_KfzKennzeichen", DbType="NVarChar(100)")]
		public string KfzKennzeichen
		{
			get
			{
				return this._KfzKennzeichen;
			}
			set
			{
				if ((this._KfzKennzeichen != value))
				{
					this.OnKfzKennzeichenChanging(value);
					this.SendPropertyChanging();
					this._KfzKennzeichen = value;
					this.SendPropertyChanged("KfzKennzeichen");
					this.OnKfzKennzeichenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="kfzFabrikat", Storage="_KfzFabrikat", DbType="NVarChar(100)")]
		public string KfzFabrikat
		{
			get
			{
				return this._KfzFabrikat;
			}
			set
			{
				if ((this._KfzFabrikat != value))
				{
					this.OnKfzFabrikatChanging(value);
					this.SendPropertyChanging();
					this._KfzFabrikat = value;
					this.SendPropertyChanged("KfzFabrikat");
					this.OnKfzFabrikatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="versicherungNr", Storage="_VersicherungNr", DbType="Int")]
		public System.Nullable<int> VersicherungNr
		{
			get
			{
				return this._VersicherungNr;
			}
			set
			{
				if ((this._VersicherungNr != value))
				{
					this.OnVersicherungNrChanging(value);
					this.SendPropertyChanging();
					this._VersicherungNr = value;
					this.SendPropertyChanged("VersicherungNr");
					this.OnVersicherungNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="datum", Storage="_Datum", DbType="DateTime")]
		public System.Nullable<System.DateTime> Datum
		{
			get
			{
				return this._Datum;
			}
			set
			{
				if ((this._Datum != value))
				{
					this.OnDatumChanging(value);
					this.SendPropertyChanging();
					this._Datum = value;
					this.SendPropertyChanged("Datum");
					this.OnDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AuftragNr", Storage="_TblAttachment", ThisKey="AuftragNr", OtherKey="AuftragNr", DeleteRule="CASCADE")]
		public EntitySet<TblAttachment> TblAttachment
		{
			get
			{
				return this._TblAttachment;
			}
			set
			{
				this._TblAttachment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VersicherungNR", Storage="_TblVersicherung", ThisKey="VersicherungNr", OtherKey="VersicherungNr", IsForeignKey=true)]
		public TblVersicherung TblVersicherung
		{
			get
			{
				return this._TblVersicherung.Entity;
			}
			set
			{
				TblVersicherung previousValue = this._TblVersicherung.Entity;
				if (((previousValue != value) 
							|| (this._TblVersicherung.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblVersicherung.Entity = null;
						previousValue.TblAuftrag.Remove(this);
					}
					this._TblVersicherung.Entity = value;
					if ((value != null))
					{
						value.TblAuftrag.Add(this);
						this._VersicherungNr = value.VersicherungNr;
					}
					else
					{
						this._VersicherungNr = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblVersicherung");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblAttachment(TblAttachment entity)
		{
			this.SendPropertyChanging();
			entity.TblAuftrag = this;
		}
		
		private void detach_TblAttachment(TblAttachment entity)
		{
			this.SendPropertyChanging();
			entity.TblAuftrag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tblFabrikat")]
	public partial class TblFabrikat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Bezeichnung;
		
    #region Definitionen der Extensibility-Methode
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBezeichnungChanging(string value);
    partial void OnBezeichnungChanged();
    #endregion
		
		public TblFabrikat()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bezeichnung", DbType="NVarChar(100)")]
		public string Bezeichnung
		{
			get
			{
				return this._Bezeichnung;
			}
			set
			{
				if ((this._Bezeichnung != value))
				{
					this.OnBezeichnungChanging(value);
					this.SendPropertyChanging();
					this._Bezeichnung = value;
					this.SendPropertyChanged("Bezeichnung");
					this.OnBezeichnungChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tblVersicherung")]
	public partial class TblVersicherung : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VersicherungNr;
		
		private string _Name;
		
		private EntitySet<TblAuftrag> _TblAuftrag;
		
    #region Definitionen der Extensibility-Methode
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersicherungNrChanging(int value);
    partial void OnVersicherungNrChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TblVersicherung()
		{
			this._TblAuftrag = new EntitySet<TblAuftrag>(new Action<TblAuftrag>(this.attach_TblAuftrag), new Action<TblAuftrag>(this.detach_TblAuftrag));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="versicherungNr", Storage="_VersicherungNr", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VersicherungNr
		{
			get
			{
				return this._VersicherungNr;
			}
			set
			{
				if ((this._VersicherungNr != value))
				{
					this.OnVersicherungNrChanging(value);
					this.SendPropertyChanging();
					this._VersicherungNr = value;
					this.SendPropertyChanged("VersicherungNr");
					this.OnVersicherungNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VersicherungNR", Storage="_TblAuftrag", ThisKey="VersicherungNr", OtherKey="VersicherungNr", DeleteRule="CASCADE")]
		public EntitySet<TblAuftrag> TblAuftrag
		{
			get
			{
				return this._TblAuftrag;
			}
			set
			{
				this._TblAuftrag.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblAuftrag(TblAuftrag entity)
		{
			this.SendPropertyChanging();
			entity.TblVersicherung = this;
		}
		
		private void detach_TblAuftrag(TblAuftrag entity)
		{
			this.SendPropertyChanging();
			entity.TblVersicherung = null;
		}
	}
}
#pragma warning restore 1591
